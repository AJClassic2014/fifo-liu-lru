import sysresources=['A','B','C','D']processes=['P0','P1','P2','P3','P4']AVAILABLE=[2,1,0,0]Max=[[0,0,1,2],[2,7,5,0],[6,6,5,6],[4,3,5,6], [0,6,5,2]]ALLOCATION=[[0,0,1,2],[2,0,0,0],[0,0,3,4],[2,3,5,4],[0,3,3,2]]NEED=[[0,0,0,0],[0,7,5,0],[6,6,2,2],[2,0,0,2],[0,3,2,0]]            Request=[0,0,0,0]                                       def main():         flag='Y';          while flag=='Y' or 'y':       i=-1      processname='E'      while 1==1:              print "please give an process number to request resources(P0,P1,P2,P3 or P4) "               processname = str(raw_input('Enter an process : '))                                   if processname=='P0':                i=0;                break;       if processname=='P1':                i=1;                break;       if processname=='P2':                i=2                break;       if processname=='P3':                i=3;                break;       if processname=='P4':                i=4;                break;	   		       print "the input number is not existing, try again\n"       continue;       break;      print " "      print "please give the input as resource that %s requests " %(processname)      for j in range(0,4):                 print " the request of resouece %s :" %(resources[j])                   Request[j] = int(raw_input('Enter an integer : '))          if Request[j]>NEED[i][j]:                         print "the amount of request is bigger than (NEED) %d, please try again" %(NEED[i][j])                        flag='N';             break;                     else:                      if Request[j]>AVAILABLE[j]:                           print "the amount of request is bigger than AVAILABLE %d, please try again" %(AVAILABLE[j])                                          flag='N';               break;                                        if flag=='Y':                  changdata(i)          if chkerr(i)==1:                       rstordata(i);             showdata();                     else:                      showdata();                                       print " "       print "continue or not,press 'Y' to continue, press 'N' to quit the demonstration: "       flag = str(raw_input('Enter N or Y: '))       if flag=='N':          sys.exit()              def showdata():    i=0   j=0   print "The resources situation of the system currently:"    print " "    for j in range(0, 4):        print " resource %d AVAILABLE : %d " %(j,AVAILABLE[j])       print " "    print "The need of the current system respectively:"   print " "   for i in range(0, 5):     need=str(NEED[i])     number=str(i)     print " P"+number+" NEED "+need    print " "                       print "The allocation situation for every process currently: \n"    for i in range(0, 5):       allocation=str(ALLOCATION[i])       allocationnumber=str(i)       print " p"+allocationnumber+" ALLOCATION "+allocation                                   print " "     def changdata(k):   j=0   for j in range(0, 4):                  #reset the current resource one by one      AVAILABLE[j]=AVAILABLE[j]-Request[j];     ALLOCATION[k][j]=ALLOCATION[k][j]+Request[j];     NEED[k][j]=NEED[k][j]-Request[j];    def rstordata(k):                       j=0;  for j in range(0, 4):      AVAILABLE[j]=AVAILABLE[j]+Request[j];     ALLOCATION[k][j]=ALLOCATION[k][j]-Request[j];     NEED[k][j]=NEED[k][j]+Request[j];    def chkerr(s): #check the state is safe or not                            WORK=[]     FINISH=[]     allelement = True     for i in range(0, 5): #innitalize all the processes are "unfinished"       FINISH.append("FALSE");          temp=[]     for j in range(0,4):       #print AVAILABLE,"-------------------s"      WORK.append(AVAILABLE[j]);      a=0        while a<5:                allelement = True         if FINISH[a]=="FALSE"and allelement==True: #and NEED[a][b]<=WORK[c]: # see available is enough for next          for h in range (0,4):#check all the need should smaller than work               if NEED[a][h]>WORK[h]:                    allelement=False                    break;          if allelement==True:#all the elements are smaller or equal work               for k in range(0,4):                    WORK[k]=WORK[k]+ALLOCATION[a][k];               print WORK,"work"                              FINISH[a]="TRUE";                temp.append(a);               a=0           if allelement==False:               a=a+1;                                      else: # if the process is finished to be allocated,or available is not enough for need, go to the next                 a=a+1;                                                                             for i in range(0, 5):            if FINISH[i]=="FALSE": # if there is one or are more than one unfinished processes, not safe              print " "          print "system is not safe!!! the request in this time is not successful!!!"         print " "          return 1; #unsafe                  print " "          print "system is safe and request in this time is successful"      print ""      print "for resourse %s the safe order is:" %(resources[j])     for k in range(0,len(temp)):       f=temp[k]       print "process %s -> " %(processes[f])                             return 0; #safe state         if __name__ == "__main__":    main()